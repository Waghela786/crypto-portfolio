{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\waghe\\\\Desktop\\\\crypto-portfolio\\\\my-app\\\\src\\\\components\\\\NotificationBell.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport API from \"../services/api\";\nimport { Bell as BellIcon } from \"lucide-react\";\nimport { io } from \"socket.io-client\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NotificationBell({\n  token,\n  userId\n}) {\n  _s();\n  console.debug(\"NotificationBell: render\", {\n    tokenProvided: !!token,\n    userId\n  });\n  const navigate = useNavigate();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  // no dropdown in header anymore — header only shows bell + count; clicking navigates to notifications page\n  const [toast, setToast] = useState(null); // transient popup for incoming notifications\n\n  // Double-safety: compute token and userId without early-return (hooks must be called unconditionally)\n  const tokenLocalFromStorage = token || localStorage.getItem(\"token\");\n  const resolvedUserId = userId || function () {\n    try {\n      const u = localStorage.getItem(\"user\");\n      return u ? JSON.parse(u)._id || JSON.parse(u).id : null;\n    } catch (e) {\n      return null;\n    }\n  }();\n  const isAuthenticated = !!tokenLocalFromStorage && !!resolvedUserId;\n\n  // Small wrapper that ensures an icon is always rendered even if CSS (Tailwind) is not present.\n  const IconWrapper = ({\n    onClick\n  }) => {\n    try {\n      // lucide-react icons accept size and color props; use explicit values instead of relying on CSS classes\n      return /*#__PURE__*/_jsxDEV(BellIcon, {\n        size: 20,\n        color: \"#ffffff\",\n        style: {\n          cursor: \"pointer\",\n          display: \"block\"\n        },\n        onClick: onClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this);\n    } catch (e) {\n      // Fallback inline SVG in case lucide-react isn't available for any reason\n      return /*#__PURE__*/_jsxDEV(\"svg\", {\n        onClick: onClick,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 24 24\",\n        fill: \"currentColor\",\n        width: \"20\",\n        height: \"20\",\n        style: {\n          cursor: \"pointer\",\n          color: \"#ffffff\",\n          display: \"block\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M12 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 006 14h12a1 1 0 00.707-1.707L18 11.586V8a6 6 0 00-6-6zM8 20a4 4 0 008 0H8z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  useEffect(() => {\n    if (!isAuthenticated) return; // don't attempt to fetch/connect when not authenticated\n    const tokenLocal = tokenLocalFromStorage;\n    const fetchNotifications = async () => {\n      try {\n        const res = await API.get(\"/notifications\", {\n          headers: {\n            Authorization: `Bearer ${tokenLocal}`\n          }\n        });\n        console.debug(\"NotificationBell: fetched notifications\", res.data);\n        setNotifications(res.data || []);\n        setUnreadCount((res.data || []).filter(n => !n.isRead).length);\n      } catch (err) {\n        console.error(\"Error fetching notifications:\", err);\n      }\n    };\n\n    // Listen for app:login event and re-fetch immediately when user logs in\n    const onAppLogin = e => {\n      try {\n        fetchNotifications();\n      } catch (err) {\n        console.debug(\"NotificationBell: failed to fetch on app:login\", err);\n      }\n    };\n    window.addEventListener(\"app:login\", onAppLogin);\n\n    // Helper: resolve current user id reliably (string) from prop or localStorage\n    const resolveCurrentUid = () => {\n      let uid = userId;\n      if (!uid) {\n        try {\n          const u = localStorage.getItem(\"user\");\n          uid = u ? JSON.parse(u)._id || JSON.parse(u).id : null;\n        } catch (e) {\n          uid = null;\n        }\n      }\n      return uid ? String(uid) : null;\n    };\n\n    // Fetch existing notifications first\n    fetchNotifications();\n\n    // --- Fallback polling: refresh notifications every 10s in case socket events are missed ---\n    const pollInterval = 10000; // 10 seconds\n    const pollId = setInterval(() => {\n      fetchNotifications();\n    }, pollInterval);\n\n    // Determine current user id — if unknown, skip socket connect (prevents receiving unrelated emits)\n    const currentUid = resolveCurrentUid();\n    if (!currentUid) {\n      console.warn(\"NotificationBell: current user id not found; skipping Socket.IO connection\");\n      return;\n    }\n    const backendOrigin = (API.defaults && API.defaults.baseURL ? String(API.defaults.baseURL).replace(/\\/api\\/?$/, \"\") : \"\") || \"http://localhost:5000\";\n    const socket = io(backendOrigin, {\n      auth: {\n        token: tokenLocal\n      }\n    });\n    socket.on(\"connect\", () => {\n      console.debug(\"NotificationBell: socket connected\", socket.id, \"(handshake auth sent)\");\n    });\n    socket.on(\"newNotification\", notification => {\n      console.debug(\"NotificationBell: received newNotification\", notification);\n\n      // Resolve notification's intended user id (supports populated object or raw id)\n      let notifUserId = null;\n      if (notification && notification.user) {\n        try {\n          notifUserId = notification.user._id ? String(notification.user._id) : String(notification.user);\n        } catch (e) {\n          notifUserId = String(notification.user);\n        }\n      }\n\n      // Strict check: only accept notification if both ids exist and match\n      if (!notifUserId || notifUserId !== currentUid) {\n        console.debug(\"NotificationBell: ignoring notification not for this user\", {\n          notifUserId,\n          currentUid\n        });\n        return;\n      }\n      setNotifications(prev => [notification, ...prev]);\n      setUnreadCount(prev => prev + 1);\n\n      // Show transient toast popup for recipient only\n      try {\n        setToast({\n          id: notification._id || Date.now(),\n          message: notification.message\n        });\n        // auto-dismiss after 4s\n        setTimeout(() => setToast(null), 4000);\n        // Also try the Web Notification API as a best-effort (requires user permission)\n        if (window.Notification && Notification.permission === \"granted\") {\n          new Notification(\"New notification\", {\n            body: notification.message\n          });\n        } else if (window.Notification && Notification.permission !== \"denied\") {\n          Notification.requestPermission().then(perm => {\n            if (perm === \"granted\") new Notification(\"New notification\", {\n              body: notification.message\n            });\n          });\n        }\n      } catch (e) {\n        console.debug(\"NotificationBell: toast show failed\", e);\n      }\n    });\n    return () => {\n      clearInterval(pollId);\n      socket.disconnect();\n      window.removeEventListener(\"app:login\", onAppLogin);\n    };\n  }, [isAuthenticated, resolvedUserId, tokenLocalFromStorage, userId]);\n  const markAsRead = async id => {\n    try {\n      const tokenLocal = token || localStorage.getItem(\"token\");\n      await API.put(`/notifications/${id}/read`, null, {\n        headers: {\n          Authorization: `Bearer ${tokenLocal}`\n        }\n      });\n      setNotifications(prev => prev.map(n => n._id === id ? {\n        ...n,\n        isRead: true\n      } : n));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (err) {\n      console.error(\"Error marking notification as read:\", err);\n    }\n  };\n\n  // Mark all unread notifications as read (used when opening the dropdown)\n  const markAllAsRead = async () => {\n    try {\n      const unread = notifications.filter(n => !n.isRead).map(n => n._id);\n      if (unread.length === 0) return;\n      const tokenLocal = token || localStorage.getItem(\"token\");\n      await Promise.all(unread.map(id => API.put(`/notifications/${id}/read`, null, {\n        headers: {\n          Authorization: `Bearer ${tokenLocal}`\n        }\n      })));\n      // Update local state\n      setNotifications(prev => prev.map(n => ({\n        ...n,\n        isRead: true\n      })));\n      setUnreadCount(0);\n    } catch (err) {\n      console.error(\"Error marking all notifications as read:\", err);\n    }\n  };\n  const handleNotificationClick = n => {\n    if (!n.isRead) markAsRead(n._id);\n    // Navigate to the full notifications page for details\n    try {\n      navigate(\"/notifications\");\n    } catch (e) {\n      console.debug(\"NotificationBell: navigate failed\", e);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      display: \"inline-block\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(IconWrapper, {\n      onClick: async () => {\n        // When user clicks the bell in the header, mark all unread as read and go to the notifications page\n        try {\n          await markAllAsRead();\n        } catch (e) {\n          console.debug(\"NotificationBell: markAllAsRead failed\", e);\n        }\n        try {\n          navigate(\"/notifications\");\n        } catch (e) {\n          console.debug(\"NotificationBell: navigate failed\", e);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        position: \"absolute\",\n        top: -6,\n        right: -6,\n        backgroundColor: \"#ff4d4d\",\n        color: \"#fff\",\n        borderRadius: \"50%\",\n        width: 18,\n        height: 18,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        fontSize: 10,\n        lineHeight: \"10px\"\n      },\n      children: unreadCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this), toast && /*#__PURE__*/_jsxDEV(\"div\", {\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      style: {\n        position: \"fixed\",\n        right: 20,\n        top: 80,\n        backgroundColor: \"#111827\",\n        color: \"#fff\",\n        padding: \"10px 14px\",\n        borderRadius: 8,\n        boxShadow: \"0 6px 18px rgba(0,0,0,0.2)\",\n        zIndex: 9999,\n        maxWidth: 320\n      },\n      onClick: () => setToast(null),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 600,\n          marginBottom: 4\n        },\n        children: \"New notification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 13\n        },\n        children: toast.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n}\n_s(NotificationBell, \"rgw183hLofPzKWUkjcb39WwEDT4=\", false, function () {\n  return [useNavigate];\n});\n_c = NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["useState","useEffect","API","Bell","BellIcon","io","useNavigate","jsxDEV","_jsxDEV","NotificationBell","token","userId","_s","console","debug","tokenProvided","navigate","notifications","setNotifications","unreadCount","setUnreadCount","toast","setToast","tokenLocalFromStorage","localStorage","getItem","resolvedUserId","u","JSON","parse","_id","id","e","isAuthenticated","IconWrapper","onClick","size","color","style","cursor","display","fileName","_jsxFileName","lineNumber","columnNumber","xmlns","viewBox","fill","width","height","children","d","tokenLocal","fetchNotifications","res","get","headers","Authorization","data","filter","n","isRead","length","err","error","onAppLogin","window","addEventListener","resolveCurrentUid","uid","String","pollInterval","pollId","setInterval","currentUid","warn","backendOrigin","defaults","baseURL","replace","socket","auth","on","notification","notifUserId","user","prev","Date","now","message","setTimeout","Notification","permission","body","requestPermission","then","perm","clearInterval","disconnect","removeEventListener","markAsRead","put","map","Math","max","markAllAsRead","unread","Promise","all","handleNotificationClick","position","top","right","backgroundColor","borderRadius","alignItems","justifyContent","fontSize","lineHeight","role","padding","boxShadow","zIndex","maxWidth","fontWeight","marginBottom","_c","$RefreshReg$"],"sources":["C:/Users/waghe/Desktop/crypto-portfolio/my-app/src/components/NotificationBell.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport API from \"../services/api\";\r\nimport { Bell as BellIcon } from \"lucide-react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function NotificationBell({ token, userId }) {\r\n  console.debug(\"NotificationBell: render\", { tokenProvided: !!token, userId });\r\n  const navigate = useNavigate();\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  // no dropdown in header anymore — header only shows bell + count; clicking navigates to notifications page\r\n  const [toast, setToast] = useState(null); // transient popup for incoming notifications\r\n\r\n  // Double-safety: compute token and userId without early-return (hooks must be called unconditionally)\r\n  const tokenLocalFromStorage = token || localStorage.getItem(\"token\");\r\n  const resolvedUserId =\r\n    userId ||\r\n    (function () {\r\n      try {\r\n        const u = localStorage.getItem(\"user\");\r\n        return u ? JSON.parse(u)._id || JSON.parse(u).id : null;\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    })();\r\n  const isAuthenticated = !!tokenLocalFromStorage && !!resolvedUserId;\r\n\r\n  // Small wrapper that ensures an icon is always rendered even if CSS (Tailwind) is not present.\r\n  const IconWrapper = ({ onClick }) => {\r\n    try {\r\n      // lucide-react icons accept size and color props; use explicit values instead of relying on CSS classes\r\n      return (\r\n        <BellIcon\r\n          size={20}\r\n          color=\"#ffffff\"\r\n          style={{ cursor: \"pointer\", display: \"block\" }}\r\n          onClick={onClick}\r\n        />\r\n      );\r\n    } catch (e) {\r\n      // Fallback inline SVG in case lucide-react isn't available for any reason\r\n      return (\r\n        <svg\r\n          onClick={onClick}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"currentColor\"\r\n          width=\"20\"\r\n          height=\"20\"\r\n          style={{ cursor: \"pointer\", color: \"#ffffff\", display: \"block\" }}\r\n        >\r\n          <path d=\"M12 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 006 14h12a1 1 0 00.707-1.707L18 11.586V8a6 6 0 00-6-6zM8 20a4 4 0 008 0H8z\" />\r\n        </svg>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) return; // don't attempt to fetch/connect when not authenticated\r\n    const tokenLocal = tokenLocalFromStorage;\r\n    const fetchNotifications = async () => {\r\n      try {\r\n        const res = await API.get(\"/notifications\", {\r\n          headers: { Authorization: `Bearer ${tokenLocal}` },\r\n        });\r\n        console.debug(\"NotificationBell: fetched notifications\", res.data);\r\n        setNotifications(res.data || []);\r\n        setUnreadCount((res.data || []).filter((n) => !n.isRead).length);\r\n      } catch (err) {\r\n        console.error(\"Error fetching notifications:\", err);\r\n      }\r\n    };\r\n\r\n    // Listen for app:login event and re-fetch immediately when user logs in\r\n    const onAppLogin = (e) => {\r\n      try {\r\n        fetchNotifications();\r\n      } catch (err) {\r\n        console.debug(\"NotificationBell: failed to fetch on app:login\", err);\r\n      }\r\n    };\r\n    window.addEventListener(\"app:login\", onAppLogin);\r\n\r\n    // Helper: resolve current user id reliably (string) from prop or localStorage\r\n    const resolveCurrentUid = () => {\r\n      let uid = userId;\r\n      if (!uid) {\r\n        try {\r\n          const u = localStorage.getItem(\"user\");\r\n          uid = u ? JSON.parse(u)._id || JSON.parse(u).id : null;\r\n        } catch (e) {\r\n          uid = null;\r\n        }\r\n      }\r\n      return uid ? String(uid) : null;\r\n    };\r\n\r\n  // Fetch existing notifications first\r\n  fetchNotifications();\r\n\r\n    // --- Fallback polling: refresh notifications every 10s in case socket events are missed ---\r\n    const pollInterval = 10000; // 10 seconds\r\n    const pollId = setInterval(() => {\r\n      fetchNotifications();\r\n    }, pollInterval);\r\n\r\n    // Determine current user id — if unknown, skip socket connect (prevents receiving unrelated emits)\r\n    const currentUid = resolveCurrentUid();\r\n    if (!currentUid) {\r\n      console.warn(\"NotificationBell: current user id not found; skipping Socket.IO connection\");\r\n      return;\r\n    }\r\n\r\n    const backendOrigin = (API.defaults && API.defaults.baseURL\r\n      ? String(API.defaults.baseURL).replace(/\\/api\\/?$/, \"\")\r\n      : \"\") || \"http://localhost:5000\";\r\n\r\n    const socket = io(backendOrigin, { auth: { token: tokenLocal } });\r\n\r\n    socket.on(\"connect\", () => {\r\n      console.debug(\"NotificationBell: socket connected\", socket.id, \"(handshake auth sent)\");\r\n    });\r\n\r\n    socket.on(\"newNotification\", (notification) => {\r\n      console.debug(\"NotificationBell: received newNotification\", notification);\r\n\r\n      // Resolve notification's intended user id (supports populated object or raw id)\r\n      let notifUserId = null;\r\n      if (notification && notification.user) {\r\n        try {\r\n          notifUserId = notification.user._id ? String(notification.user._id) : String(notification.user);\r\n        } catch (e) {\r\n          notifUserId = String(notification.user);\r\n        }\r\n      }\r\n\r\n      // Strict check: only accept notification if both ids exist and match\r\n      if (!notifUserId || notifUserId !== currentUid) {\r\n        console.debug(\"NotificationBell: ignoring notification not for this user\", { notifUserId, currentUid });\r\n        return;\r\n      }\r\n\r\n      setNotifications((prev) => [notification, ...prev]);\r\n      setUnreadCount((prev) => prev + 1);\r\n\r\n      // Show transient toast popup for recipient only\r\n      try {\r\n        setToast({ id: notification._id || Date.now(), message: notification.message });\r\n        // auto-dismiss after 4s\r\n        setTimeout(() => setToast(null), 4000);\r\n        // Also try the Web Notification API as a best-effort (requires user permission)\r\n        if (window.Notification && Notification.permission === \"granted\") {\r\n          new Notification(\"New notification\", { body: notification.message });\r\n        } else if (window.Notification && Notification.permission !== \"denied\") {\r\n          Notification.requestPermission().then((perm) => {\r\n            if (perm === \"granted\") new Notification(\"New notification\", { body: notification.message });\r\n          });\r\n        }\r\n      } catch (e) {\r\n        console.debug(\"NotificationBell: toast show failed\", e);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      clearInterval(pollId);\r\n      socket.disconnect();\r\n      window.removeEventListener(\"app:login\", onAppLogin);\r\n    };\r\n  }, [isAuthenticated, resolvedUserId, tokenLocalFromStorage, userId]);\r\n\r\n  const markAsRead = async (id) => {\r\n    try {\r\n      const tokenLocal = token || localStorage.getItem(\"token\");\r\n      await API.put(`/notifications/${id}/read`, null, {\r\n        headers: { Authorization: `Bearer ${tokenLocal}` },\r\n      });\r\n      setNotifications((prev) =>\r\n        prev.map((n) => (n._id === id ? { ...n, isRead: true } : n))\r\n      );\r\n      setUnreadCount((prev) => Math.max(0, prev - 1));\r\n    } catch (err) {\r\n      console.error(\"Error marking notification as read:\", err);\r\n    }\r\n  };\r\n\r\n  // Mark all unread notifications as read (used when opening the dropdown)\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      const unread = notifications.filter((n) => !n.isRead).map((n) => n._id);\r\n      if (unread.length === 0) return;\r\n      const tokenLocal = token || localStorage.getItem(\"token\");\r\n      await Promise.all(\r\n        unread.map((id) => API.put(`/notifications/${id}/read`, null, { headers: { Authorization: `Bearer ${tokenLocal}` } }))\r\n      );\r\n      // Update local state\r\n      setNotifications((prev) => prev.map((n) => ({ ...n, isRead: true })));\r\n      setUnreadCount(0);\r\n    } catch (err) {\r\n      console.error(\"Error marking all notifications as read:\", err);\r\n    }\r\n  };\r\n\r\n  const handleNotificationClick = (n) => {\r\n    if (!n.isRead) markAsRead(n._id);\r\n    // Navigate to the full notifications page for details\r\n    try {\r\n      navigate(\"/notifications\");\r\n    } catch (e) {\r\n      console.debug(\"NotificationBell: navigate failed\", e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", display: \"inline-block\" }}>\r\n      <IconWrapper\r\n        onClick={async () => {\r\n          // When user clicks the bell in the header, mark all unread as read and go to the notifications page\r\n          try {\r\n            await markAllAsRead();\r\n          } catch (e) {\r\n            console.debug(\"NotificationBell: markAllAsRead failed\", e);\r\n          }\r\n          try {\r\n            navigate(\"/notifications\");\r\n          } catch (e) {\r\n            console.debug(\"NotificationBell: navigate failed\", e);\r\n          }\r\n        }}\r\n      />\r\n      {unreadCount > 0 && (\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            top: -6,\r\n            right: -6,\r\n            backgroundColor: \"#ff4d4d\",\r\n            color: \"#fff\",\r\n            borderRadius: \"50%\",\r\n            width: 18,\r\n            height: 18,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            fontSize: 10,\r\n            lineHeight: \"10px\",\r\n          }}\r\n        >\r\n          {unreadCount}\r\n        </span>\r\n      )}\r\n\r\n      {/* Header no longer renders full messages — messages live on /notifications page. */}\r\n\r\n      {/* Transient toast popup for incoming notifications */}\r\n      {toast && (\r\n        <div\r\n          role=\"status\"\r\n          aria-live=\"polite\"\r\n          style={{\r\n            position: \"fixed\",\r\n            right: 20,\r\n            top: 80,\r\n            backgroundColor: \"#111827\",\r\n            color: \"#fff\",\r\n            padding: \"10px 14px\",\r\n            borderRadius: 8,\r\n            boxShadow: \"0 6px 18px rgba(0,0,0,0.2)\",\r\n            zIndex: 9999,\r\n            maxWidth: 320,\r\n          }}\r\n          onClick={() => setToast(null)}\r\n        >\r\n          <div style={{ fontWeight: 600, marginBottom: 4 }}>New notification</div>\r\n          <div style={{ fontSize: 13 }}>{toast.message}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}