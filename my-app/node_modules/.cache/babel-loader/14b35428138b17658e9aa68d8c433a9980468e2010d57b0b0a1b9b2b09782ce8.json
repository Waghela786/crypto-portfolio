{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\waghe\\\\Desktop\\\\crypto-portfolio\\\\my-app\\\\src\\\\components\\\\NotificationBell.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport API from \"../services/api\";\nimport { Bell as BellIcon } from \"lucide-react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NotificationBell({\n  token,\n  userId\n}) {\n  _s();\n  console.debug(\"NotificationBell: render\", {\n    tokenProvided: !!token,\n    userId\n  });\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [showDropdown, setShowDropdown] = useState(false);\n\n  // Small wrapper that ensures an icon is always rendered even if CSS (Tailwind) is not present.\n  const IconWrapper = ({\n    onClick\n  }) => {\n    try {\n      // lucide-react icons accept size and color props; use explicit values instead of relying on CSS classes\n      return /*#__PURE__*/_jsxDEV(BellIcon, {\n        size: 20,\n        color: \"#ffffff\",\n        style: {\n          cursor: \"pointer\",\n          display: \"block\"\n        },\n        onClick: onClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this);\n    } catch (e) {\n      // Fallback inline SVG in case lucide-react isn't available for any reason\n      return /*#__PURE__*/_jsxDEV(\"svg\", {\n        onClick: onClick,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 24 24\",\n        fill: \"currentColor\",\n        width: \"20\",\n        height: \"20\",\n        style: {\n          cursor: \"pointer\",\n          color: \"#ffffff\",\n          display: \"block\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M12 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 006 14h12a1 1 0 00.707-1.707L18 11.586V8a6 6 0 00-6-6zM8 20a4 4 0 008 0H8z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  useEffect(() => {\n    const tokenLocal = token || localStorage.getItem(\"token\");\n    if (!tokenLocal) return;\n    const fetchNotifications = async () => {\n      try {\n        const res = await API.get(\"/notifications\", {\n          headers: {\n            Authorization: `Bearer ${tokenLocal}`\n          }\n        });\n        console.debug(\"NotificationBell: fetched notifications\", res.data);\n        setNotifications(res.data || []);\n        setUnreadCount((res.data || []).filter(n => !n.isRead).length);\n      } catch (err) {\n        console.error(\"Error fetching notifications:\", err);\n      }\n    };\n\n    // Helper: resolve current user id reliably (string) from prop or localStorage\n    const resolveCurrentUid = () => {\n      let uid = userId;\n      if (!uid) {\n        try {\n          const u = localStorage.getItem(\"user\");\n          uid = u ? JSON.parse(u)._id || JSON.parse(u).id : null;\n        } catch (e) {\n          uid = null;\n        }\n      }\n      return uid ? String(uid) : null;\n    };\n\n    // Fetch existing notifications first\n    fetchNotifications();\n\n    // --- Fallback polling: refresh notifications every 10s in case socket events are missed ---\n    const pollInterval = 10000; // 10 seconds\n    const pollId = setInterval(() => {\n      fetchNotifications();\n    }, pollInterval);\n\n    // Determine current user id â€” if unknown, skip socket connect (prevents receiving unrelated emits)\n    const currentUid = resolveCurrentUid();\n    if (!currentUid) {\n      console.warn(\"NotificationBell: current user id not found; skipping Socket.IO connection\");\n      return;\n    }\n    const backendOrigin = (API.defaults && API.defaults.baseURL ? String(API.defaults.baseURL).replace(/\\/api\\/?$/, \"\") : \"\") || \"http://localhost:5000\";\n    const socket = io(backendOrigin, {\n      auth: {\n        token: tokenLocal\n      }\n    });\n    socket.on(\"connect\", () => {\n      console.debug(\"NotificationBell: socket connected\", socket.id, \"(handshake auth sent)\");\n    });\n    socket.on(\"newNotification\", notification => {\n      console.debug(\"NotificationBell: received newNotification\", notification);\n\n      // Resolve notification's intended user id (supports populated object or raw id)\n      let notifUserId = null;\n      if (notification && notification.user) {\n        try {\n          notifUserId = notification.user._id ? String(notification.user._id) : String(notification.user);\n        } catch (e) {\n          notifUserId = String(notification.user);\n        }\n      }\n\n      // Strict check: only accept notification if both ids exist and match\n      if (!notifUserId || notifUserId !== currentUid) {\n        console.debug(\"NotificationBell: ignoring notification not for this user\", {\n          notifUserId,\n          currentUid\n        });\n        return;\n      }\n      setNotifications(prev => [notification, ...prev]);\n      setUnreadCount(prev => prev + 1);\n    });\n    return () => {\n      clearInterval(pollId);\n      socket.disconnect();\n    };\n  }, [token, userId]);\n  const markAsRead = async id => {\n    try {\n      const tokenLocal = token || localStorage.getItem(\"token\");\n      await API.put(`/notifications/${id}/read`, null, {\n        headers: {\n          Authorization: `Bearer ${tokenLocal}`\n        }\n      });\n      setNotifications(prev => prev.map(n => n._id === id ? {\n        ...n,\n        isRead: true\n      } : n));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (err) {\n      console.error(\"Error marking notification as read:\", err);\n    }\n  };\n  const handleNotificationClick = n => {\n    if (!n.isRead) markAsRead(n._id);\n    // future: navigate or open related item\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      display: \"inline-block\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(IconWrapper, {\n      onClick: () => setShowDropdown(!showDropdown)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        position: \"absolute\",\n        top: -6,\n        right: -6,\n        backgroundColor: \"#ff4d4d\",\n        color: \"#fff\",\n        borderRadius: \"50%\",\n        width: 18,\n        height: 18,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        fontSize: 10,\n        lineHeight: \"10px\"\n      },\n      children: unreadCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute right-0 mt-2 w-64 bg-white shadow-lg border rounded-md z-50 max-h-64 overflow-y-auto\",\n      children: notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"p-2 text-sm text-gray-500\",\n        children: \"No notifications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this) : notifications.map(n => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `p-2 text-sm cursor-pointer hover:bg-gray-100 ${!n.isRead ? \"font-bold bg-gray-50\" : \"\"}`,\n        onClick: () => handleNotificationClick(n),\n        children: n.message\n      }, n._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(NotificationBell, \"sqKfwGOhj9xhUn+OWyji7ePUBmI=\");\n_c = NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["useState","useEffect","API","Bell","BellIcon","io","jsxDEV","_jsxDEV","NotificationBell","token","userId","_s","console","debug","tokenProvided","notifications","setNotifications","unreadCount","setUnreadCount","showDropdown","setShowDropdown","IconWrapper","onClick","size","color","style","cursor","display","fileName","_jsxFileName","lineNumber","columnNumber","e","xmlns","viewBox","fill","width","height","children","d","tokenLocal","localStorage","getItem","fetchNotifications","res","get","headers","Authorization","data","filter","n","isRead","length","err","error","resolveCurrentUid","uid","u","JSON","parse","_id","id","String","pollInterval","pollId","setInterval","currentUid","warn","backendOrigin","defaults","baseURL","replace","socket","auth","on","notification","notifUserId","user","prev","clearInterval","disconnect","markAsRead","put","map","Math","max","handleNotificationClick","position","top","right","backgroundColor","borderRadius","alignItems","justifyContent","fontSize","lineHeight","className","message","_c","$RefreshReg$"],"sources":["C:/Users/waghe/Desktop/crypto-portfolio/my-app/src/components/NotificationBell.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport API from \"../services/api\";\r\nimport { Bell as BellIcon } from \"lucide-react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nexport default function NotificationBell({ token, userId }) {\r\n  console.debug(\"NotificationBell: render\", { tokenProvided: !!token, userId });\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  // Small wrapper that ensures an icon is always rendered even if CSS (Tailwind) is not present.\r\n  const IconWrapper = ({ onClick }) => {\r\n    try {\r\n      // lucide-react icons accept size and color props; use explicit values instead of relying on CSS classes\r\n      return (\r\n        <BellIcon\r\n          size={20}\r\n          color=\"#ffffff\"\r\n          style={{ cursor: \"pointer\", display: \"block\" }}\r\n          onClick={onClick}\r\n        />\r\n      );\r\n    } catch (e) {\r\n      // Fallback inline SVG in case lucide-react isn't available for any reason\r\n      return (\r\n        <svg\r\n          onClick={onClick}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"currentColor\"\r\n          width=\"20\"\r\n          height=\"20\"\r\n          style={{ cursor: \"pointer\", color: \"#ffffff\", display: \"block\" }}\r\n        >\r\n          <path d=\"M12 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 006 14h12a1 1 0 00.707-1.707L18 11.586V8a6 6 0 00-6-6zM8 20a4 4 0 008 0H8z\" />\r\n        </svg>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const tokenLocal = token || localStorage.getItem(\"token\");\r\n    if (!tokenLocal) return;\r\n    const fetchNotifications = async () => {\r\n      try {\r\n        const res = await API.get(\"/notifications\", {\r\n          headers: { Authorization: `Bearer ${tokenLocal}` },\r\n        });\r\n        console.debug(\"NotificationBell: fetched notifications\", res.data);\r\n        setNotifications(res.data || []);\r\n        setUnreadCount((res.data || []).filter((n) => !n.isRead).length);\r\n      } catch (err) {\r\n        console.error(\"Error fetching notifications:\", err);\r\n      }\r\n    };\r\n\r\n    // Helper: resolve current user id reliably (string) from prop or localStorage\r\n    const resolveCurrentUid = () => {\r\n      let uid = userId;\r\n      if (!uid) {\r\n        try {\r\n          const u = localStorage.getItem(\"user\");\r\n          uid = u ? JSON.parse(u)._id || JSON.parse(u).id : null;\r\n        } catch (e) {\r\n          uid = null;\r\n        }\r\n      }\r\n      return uid ? String(uid) : null;\r\n    };\r\n\r\n    // Fetch existing notifications first\r\n    fetchNotifications();\r\n\r\n    // --- Fallback polling: refresh notifications every 10s in case socket events are missed ---\r\n    const pollInterval = 10000; // 10 seconds\r\n    const pollId = setInterval(() => {\r\n      fetchNotifications();\r\n    }, pollInterval);\r\n\r\n    // Determine current user id â€” if unknown, skip socket connect (prevents receiving unrelated emits)\r\n    const currentUid = resolveCurrentUid();\r\n    if (!currentUid) {\r\n      console.warn(\"NotificationBell: current user id not found; skipping Socket.IO connection\");\r\n      return;\r\n    }\r\n\r\n    const backendOrigin = (API.defaults && API.defaults.baseURL\r\n      ? String(API.defaults.baseURL).replace(/\\/api\\/?$/, \"\")\r\n      : \"\") || \"http://localhost:5000\";\r\n\r\n    const socket = io(backendOrigin, { auth: { token: tokenLocal } });\r\n\r\n    socket.on(\"connect\", () => {\r\n      console.debug(\"NotificationBell: socket connected\", socket.id, \"(handshake auth sent)\");\r\n    });\r\n\r\n    socket.on(\"newNotification\", (notification) => {\r\n      console.debug(\"NotificationBell: received newNotification\", notification);\r\n\r\n      // Resolve notification's intended user id (supports populated object or raw id)\r\n      let notifUserId = null;\r\n      if (notification && notification.user) {\r\n        try {\r\n          notifUserId = notification.user._id ? String(notification.user._id) : String(notification.user);\r\n        } catch (e) {\r\n          notifUserId = String(notification.user);\r\n        }\r\n      }\r\n\r\n      // Strict check: only accept notification if both ids exist and match\r\n      if (!notifUserId || notifUserId !== currentUid) {\r\n        console.debug(\"NotificationBell: ignoring notification not for this user\", { notifUserId, currentUid });\r\n        return;\r\n      }\r\n\r\n      setNotifications((prev) => [notification, ...prev]);\r\n      setUnreadCount((prev) => prev + 1);\r\n    });\r\n\r\n    return () => {\r\n      clearInterval(pollId);\r\n      socket.disconnect();\r\n    };\r\n  }, [token, userId]);\r\n\r\n  const markAsRead = async (id) => {\r\n    try {\r\n      const tokenLocal = token || localStorage.getItem(\"token\");\r\n      await API.put(`/notifications/${id}/read`, null, {\r\n        headers: { Authorization: `Bearer ${tokenLocal}` },\r\n      });\r\n      setNotifications((prev) =>\r\n        prev.map((n) => (n._id === id ? { ...n, isRead: true } : n))\r\n      );\r\n      setUnreadCount((prev) => Math.max(0, prev - 1));\r\n    } catch (err) {\r\n      console.error(\"Error marking notification as read:\", err);\r\n    }\r\n  };\r\n\r\n  const handleNotificationClick = (n) => {\r\n    if (!n.isRead) markAsRead(n._id);\r\n    // future: navigate or open related item\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", display: \"inline-block\" }}>\r\n      <IconWrapper onClick={() => setShowDropdown(!showDropdown)} />\r\n      {unreadCount > 0 && (\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            top: -6,\r\n            right: -6,\r\n            backgroundColor: \"#ff4d4d\",\r\n            color: \"#fff\",\r\n            borderRadius: \"50%\",\r\n            width: 18,\r\n            height: 18,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            fontSize: 10,\r\n            lineHeight: \"10px\",\r\n          }}\r\n        >\r\n          {unreadCount}\r\n        </span>\r\n      )}\r\n\r\n      {showDropdown && (\r\n        <div className=\"absolute right-0 mt-2 w-64 bg-white shadow-lg border rounded-md z-50 max-h-64 overflow-y-auto\">\r\n          {notifications.length === 0 ? (\r\n            <p className=\"p-2 text-sm text-gray-500\">No notifications</p>\r\n          ) : (\r\n            notifications.map((n) => (\r\n              <div\r\n                key={n._id}\r\n                className={`p-2 text-sm cursor-pointer hover:bg-gray-100 ${\r\n                  !n.isRead ? \"font-bold bg-gray-50\" : \"\"\r\n                }`}\r\n                onClick={() => handleNotificationClick(n)}\r\n              >\r\n                {n.message}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}