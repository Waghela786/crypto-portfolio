{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\waghe\\\\Desktop\\\\crypto-portfolio\\\\my-app\\\\src\\\\components\\\\NotificationBell.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport API from \"../services/api\";\nimport { Bell as BellIcon } from \"lucide-react\";\nimport { io } from \"socket.io-client\";\nimport { useNavigate } from \"react-router-dom\"; // for redirecting\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NotificationBell({\n  token,\n  userId\n}) {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    var _API$defaults, _API$defaults$baseURL;\n    const tokenLocal = token || localStorage.getItem(\"token\");\n    if (!tokenLocal) return;\n\n    // Fetch notifications manually passing the token\n    const fetchNotifications = async () => {\n      try {\n        const res = await API.get(\"/notifications\", {\n          headers: {\n            Authorization: `Bearer ${tokenLocal}`\n          }\n        });\n\n        // Always return an array, even if empty\n        const fetchedNotifications = res.data || [];\n        setNotifications(fetchedNotifications);\n        setUnreadCount(fetchedNotifications.filter(n => !n.isRead).length);\n      } catch (err) {\n        console.error(\"Error fetching notifications:\", err);\n      }\n    };\n    fetchNotifications();\n\n    // Determine backend URL for Socket.IO\n    const backendOrigin = ((_API$defaults = API.defaults) === null || _API$defaults === void 0 ? void 0 : (_API$defaults$baseURL = _API$defaults.baseURL) === null || _API$defaults$baseURL === void 0 ? void 0 : _API$defaults$baseURL.replace(/\\/api\\/?$/, \"\")) || \"http://localhost:5000\";\n    const socket = io(backendOrigin);\n    socket.on(\"connect\", () => {\n      let uid = userId;\n      if (!uid) {\n        try {\n          const u = localStorage.getItem(\"user\");\n          uid = u ? JSON.parse(u)._id || JSON.parse(u).id : null;\n        } catch {\n          uid = null;\n        }\n      }\n      if (uid) socket.emit(\"identify\", uid);\n    });\n\n    // Listen for real-time new notifications\n    socket.on(\"newNotification\", notification => {\n      setNotifications(prev => [notification, ...prev]);\n      setUnreadCount(prev => prev + 1);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [token, userId]);\n\n  // Mark notification as read and optionally redirect\n  const handleNotificationClick = async notification => {\n    try {\n      await API.put(`/notifications/${notification._id}/read`, null, {\n        headers: {\n          Authorization: `Bearer ${token || localStorage.getItem(\"token\")}`\n        }\n      });\n      setNotifications(prev => prev.map(n => n._id === notification._id ? {\n        ...n,\n        isRead: true\n      } : n));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n\n      // Redirect user to transaction page if needed\n      if (notification.link) {\n        navigate(notification.link); // e.g., \"/transactions\"\n      }\n    } catch (err) {\n      console.error(\"Error marking notification as read:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(BellIcon, {\n      className: \"w-6 h-6 text-gray-700 cursor-pointer\",\n      onClick: () => setShowDropdown(!showDropdown)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"absolute top-0 right-0 bg-red-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs\",\n      children: unreadCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute right-0 mt-2 w-64 bg-white shadow-lg border rounded-md z-50 max-h-64 overflow-y-auto\",\n      children: notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"p-2 text-sm text-gray-500\",\n        children: \"No notifications yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this) : notifications.map(n => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `p-2 text-sm cursor-pointer hover:bg-gray-100 ${!n.isRead ? \"font-bold bg-gray-50\" : \"\"}`,\n        onClick: () => handleNotificationClick(n),\n        children: n.message\n      }, n._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(NotificationBell, \"s4BJPM4nuixInbDDr84iTa9M2Tk=\", false, function () {\n  return [useNavigate];\n});\n_c = NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["useState","useEffect","API","Bell","BellIcon","io","useNavigate","jsxDEV","_jsxDEV","NotificationBell","token","userId","_s","notifications","setNotifications","unreadCount","setUnreadCount","showDropdown","setShowDropdown","navigate","_API$defaults","_API$defaults$baseURL","tokenLocal","localStorage","getItem","fetchNotifications","res","get","headers","Authorization","fetchedNotifications","data","filter","n","isRead","length","err","console","error","backendOrigin","defaults","baseURL","replace","socket","on","uid","u","JSON","parse","_id","id","emit","notification","prev","disconnect","handleNotificationClick","put","map","Math","max","link","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","message","_c","$RefreshReg$"],"sources":["C:/Users/waghe/Desktop/crypto-portfolio/my-app/src/components/NotificationBell.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport API from \"../services/api\";\r\nimport { Bell as BellIcon } from \"lucide-react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { useNavigate } from \"react-router-dom\"; // for redirecting\r\n\r\nexport default function NotificationBell({ token, userId }) {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const tokenLocal = token || localStorage.getItem(\"token\");\r\n    if (!tokenLocal) return;\r\n\r\n    // Fetch notifications manually passing the token\r\n    const fetchNotifications = async () => {\r\n      try {\r\n        const res = await API.get(\"/notifications\", {\r\n          headers: { Authorization: `Bearer ${tokenLocal}` },\r\n        });\r\n\r\n        // Always return an array, even if empty\r\n        const fetchedNotifications = res.data || [];\r\n\r\n        setNotifications(fetchedNotifications);\r\n        setUnreadCount(fetchedNotifications.filter((n) => !n.isRead).length);\r\n      } catch (err) {\r\n        console.error(\"Error fetching notifications:\", err);\r\n      }\r\n    };\r\n\r\n    fetchNotifications();\r\n\r\n    // Determine backend URL for Socket.IO\r\n    const backendOrigin = API.defaults?.baseURL?.replace(/\\/api\\/?$/, \"\") || \"http://localhost:5000\";\r\n    const socket = io(backendOrigin);\r\n\r\n    socket.on(\"connect\", () => {\r\n      let uid = userId;\r\n      if (!uid) {\r\n        try {\r\n          const u = localStorage.getItem(\"user\");\r\n          uid = u ? JSON.parse(u)._id || JSON.parse(u).id : null;\r\n        } catch {\r\n          uid = null;\r\n        }\r\n      }\r\n      if (uid) socket.emit(\"identify\", uid);\r\n    });\r\n\r\n    // Listen for real-time new notifications\r\n    socket.on(\"newNotification\", (notification) => {\r\n      setNotifications((prev) => [notification, ...prev]);\r\n      setUnreadCount((prev) => prev + 1);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [token, userId]);\r\n\r\n  // Mark notification as read and optionally redirect\r\n  const handleNotificationClick = async (notification) => {\r\n    try {\r\n      await API.put(`/notifications/${notification._id}/read`, null, {\r\n        headers: { Authorization: `Bearer ${token || localStorage.getItem(\"token\")}` },\r\n      });\r\n\r\n      setNotifications((prev) =>\r\n        prev.map((n) => (n._id === notification._id ? { ...n, isRead: true } : n))\r\n      );\r\n      setUnreadCount((prev) => Math.max(0, prev - 1));\r\n\r\n      // Redirect user to transaction page if needed\r\n      if (notification.link) {\r\n        navigate(notification.link); // e.g., \"/transactions\"\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error marking notification as read:\", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      {/* Bell Icon */}\r\n      <BellIcon\r\n        className=\"w-6 h-6 text-gray-700 cursor-pointer\"\r\n        onClick={() => setShowDropdown(!showDropdown)}\r\n      />\r\n\r\n      {/* Unread Badge */}\r\n      {unreadCount > 0 && (\r\n        <span className=\"absolute top-0 right-0 bg-red-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs\">\r\n          {unreadCount}\r\n        </span>\r\n      )}\r\n\r\n      {/* Dropdown List */}\r\n      {showDropdown && (\r\n        <div className=\"absolute right-0 mt-2 w-64 bg-white shadow-lg border rounded-md z-50 max-h-64 overflow-y-auto\">\r\n          {notifications.length === 0 ? (\r\n            <p className=\"p-2 text-sm text-gray-500\">No notifications yet</p>\r\n          ) : (\r\n            notifications.map((n) => (\r\n              <div\r\n                key={n._id}\r\n                className={`p-2 text-sm cursor-pointer hover:bg-gray-100 ${\r\n                  !n.isRead ? \"font-bold bg-gray-50\" : \"\"\r\n                }`}\r\n                onClick={() => handleNotificationClick(n)}\r\n              >\r\n                {n.message}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}